diff -r 22d178a11e30 -r 912d9cf36783 src/http/v2/ngx_http_v2.c
--- a/src/http/v2/ngx_http_v2.c
+++ b/src/http/v2/ngx_http_v2.c
@@ -316,7 +316,7 @@ ngx_http_v2_read_handler(ngx_event_t *re
     h2c = c->data;
 
     if (rev->timedout) {
-        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
+        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "peer timed out");
         ngx_http_v2_finalize_connection(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
         return;
     }
@@ -368,7 +368,7 @@ ngx_http_v2_read_handler(ngx_event_t *re
 
         if (n == 0 && (h2c->state.incomplete || h2c->processing)) {
             ngx_log_error(NGX_LOG_INFO, c->log, 0,
-                          "client prematurely closed connection");
+                          "peer prematurely closed connection");
         }
 
         if (n == 0 || n == NGX_ERROR) {
@@ -774,7 +774,7 @@ ngx_http_v2_state_data(ngx_http_v2_conne
 
         if (h2c->state.length == 0) {
             ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                          "client sent padded DATA frame "
+                          "peer sent padded DATA frame "
                           "with incorrect length: 0");
 
             return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -789,7 +789,7 @@ ngx_http_v2_state_data(ngx_http_v2_conne
 
         if (h2c->state.padding >= size) {
             ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                          "client sent padded DATA frame "
+                          "peer sent padded DATA frame "
                           "with incorrect length: %uz, padding: %uz",
                           size, h2c->state.padding);
 
@@ -805,7 +805,7 @@ ngx_http_v2_state_data(ngx_http_v2_conne
 
     if (size > h2c->recv_window) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client violated connection flow control: "
+                      "peer violated connection flow control: "
                       "received DATA frame length %uz, available window %uz",
                       size, h2c->recv_window);
 
@@ -840,7 +840,7 @@ ngx_http_v2_state_data(ngx_http_v2_conne
 
     if (size > stream->recv_window) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client violated flow control for stream %ui: "
+                      "peer violated flow control for stream %ui: "
                       "received DATA frame length %uz, available window %uz",
                       node->id, size, stream->recv_window);
 
@@ -874,7 +874,7 @@ ngx_http_v2_state_data(ngx_http_v2_conne
 
     if (stream->in_closed) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent DATA frame for half-closed stream %ui",
+                      "peer sent DATA frame for half-closed stream %ui",
                       node->id);
 
         if (ngx_http_v2_terminate_stream(h2c, stream,
@@ -1002,7 +1002,7 @@ ngx_http_v2_state_headers(ngx_http_v2_co
 
     if (h2c->state.length < size) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent HEADERS frame with incorrect length %uz",
+                      "peer sent HEADERS frame with incorrect length %uz",
                       h2c->state.length);
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -1010,7 +1010,7 @@ ngx_http_v2_state_headers(ngx_http_v2_co
 
     if (h2c->state.length == size) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent HEADERS frame with empty header block");
+                      "peer sent HEADERS frame with empty header block");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
     }
@@ -1033,7 +1033,7 @@ ngx_http_v2_state_headers(ngx_http_v2_co
 
         if (h2c->state.padding > h2c->state.length) {
             ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                          "client sent padded HEADERS frame "
+                          "peer sent padded HEADERS frame "
                           "with incorrect length: %uz, padding: %uz",
                           h2c->state.length, h2c->state.padding);
 
@@ -1064,8 +1064,8 @@ ngx_http_v2_state_headers(ngx_http_v2_co
 
     if (h2c->state.sid % 2 == 0 || h2c->state.sid <= h2c->last_sid) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent HEADERS frame with incorrect identifier "
-                      "%ui, the last was %ui", h2c->state.sid, h2c->last_sid);
+                      "peer sent HEADERS frame with incorrect identifier %ui, "
+                      "the last was %ui", h2c->state.sid, h2c->last_sid);
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
     }
@@ -1079,7 +1079,7 @@ ngx_http_v2_state_headers(ngx_http_v2_co
 
     if (depend == h2c->state.sid) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent HEADERS frame for stream %ui "
+                      "peer sent HEADERS frame for stream %ui "
                       "with incorrect dependency", h2c->state.sid);
 
         status = NGX_HTTP_V2_PROTOCOL_ERROR;
@@ -1104,7 +1104,7 @@ ngx_http_v2_state_headers(ngx_http_v2_co
         && h2scf->preread_size < NGX_HTTP_V2_DEFAULT_WINDOW)
     {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent stream with data "
+                      "peer sent stream with data "
                       "before settings were acknowledged");
 
         status = NGX_HTTP_V2_REFUSED_STREAM;
@@ -1224,14 +1224,14 @@ ngx_http_v2_state_header_block(ngx_http_
 
         if (value == NGX_DECLINED) {
             ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                          "client sent header block with too long %s value",
+                          "peer sent header block with too long %s value",
                           size_update ? "size update" : "header index");
 
             return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_COMP_ERROR);
         }
 
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent header block with incorrect length");
+                      "peer sent header block with incorrect length");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
     }
@@ -1283,7 +1283,7 @@ ngx_http_v2_state_field_len(ngx_http_v2_
 
     if (h2c->state.length < 1) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent header block with incorrect length");
+                      "peer sent header block with incorrect length");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
     }
@@ -1304,13 +1304,13 @@ ngx_http_v2_state_field_len(ngx_http_v2_
 
         if (len == NGX_DECLINED) {
             ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                        "client sent header field with too long length value");
+                        "peer sent header field with too long length value");
 
             return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_COMP_ERROR);
         }
 
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent header block with incorrect length");
+                      "peer sent header block with incorrect length");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
     }
@@ -1324,7 +1324,7 @@ ngx_http_v2_state_field_len(ngx_http_v2_
 
     if ((size_t) len > h2scf->max_field_size) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client exceeded http2_max_field_size limit");
+                      "peer exceeded http2_max_field_size limit");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_ENHANCE_YOUR_CALM);
     }
@@ -1378,7 +1378,7 @@ ngx_http_v2_state_field_huff(ngx_http_v2
         != NGX_OK)
     {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent invalid encoded header field");
+                      "peer sent invalid encoded header field");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_COMP_ERROR);
     }
@@ -1397,7 +1397,7 @@ ngx_http_v2_state_field_huff(ngx_http_v2
 
     if (h2c->state.flags & NGX_HTTP_V2_END_HEADERS_FLAG) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent header field with incorrect length");
+                      "peer sent header field with incorrect length");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
     }
@@ -1442,7 +1442,7 @@ ngx_http_v2_state_field_raw(ngx_http_v2_
 
     if (h2c->state.flags & NGX_HTTP_V2_END_HEADERS_FLAG) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent header field with incorrect length");
+                      "peer sent header field with incorrect length");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
     }
@@ -1484,7 +1484,7 @@ ngx_http_v2_state_field_skip(ngx_http_v2
 
     if (h2c->state.flags & NGX_HTTP_V2_END_HEADERS_FLAG) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent header field with incorrect length");
+                      "peer sent header field with incorrect length");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
     }
@@ -1531,7 +1531,7 @@ ngx_http_v2_state_process_header(ngx_htt
 
     if (len > h2c->state.header_limit) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client exceeded http2_max_header_size limit");
+                      "peer exceeded http2_max_header_size limit");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_ENHANCE_YOUR_CALM);
     }
@@ -1601,7 +1601,7 @@ ngx_http_v2_state_process_header(ngx_htt
 
         if (cscf->ignore_invalid_headers) {
             ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
-                          "client sent invalid header: \"%V\"", &header->name);
+                          "peer sent invalid header: \"%V\"", &header->name);
 
             return ngx_http_v2_state_header_complete(h2c, pos, end);
         }
@@ -1727,7 +1727,7 @@ ngx_http_v2_handle_continuation(ngx_http
 
     if (ngx_http_v2_parse_type(head) != NGX_HTTP_V2_CONTINUATION_FRAME) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-             "client sent inappropriate frame while CONTINUATION was expected");
+             "peer sent inappropriate frame while CONTINUATION was expected");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
     }
@@ -1736,7 +1736,7 @@ ngx_http_v2_handle_continuation(ngx_http
 
     if (h2c->state.sid != ngx_http_v2_parse_sid(&p[5])) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                    "client sent CONTINUATION frame with incorrect identifier");
+                    "peer sent CONTINUATION frame with incorrect identifier");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
     }
@@ -1768,7 +1768,7 @@ ngx_http_v2_state_priority(ngx_http_v2_c
 
     if (h2c->state.length != NGX_HTTP_V2_PRIORITY_SIZE) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent PRIORITY frame with incorrect length %uz",
+                      "peer sent PRIORITY frame with incorrect length %uz",
                       h2c->state.length);
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -1793,14 +1793,14 @@ ngx_http_v2_state_priority(ngx_http_v2_c
 
     if (h2c->state.sid == 0) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent PRIORITY frame with incorrect identifier");
+                      "peer sent PRIORITY frame with incorrect identifier");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
     }
 
     if (depend == h2c->state.sid) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent PRIORITY frame for stream %ui "
+                      "peer sent PRIORITY frame for stream %ui "
                       "with incorrect dependency", h2c->state.sid);
 
         node = ngx_http_v2_get_node_by_id(h2c, h2c->state.sid, 0);
@@ -1864,7 +1864,7 @@ ngx_http_v2_state_rst_stream(ngx_http_v2
 
     if (h2c->state.length != NGX_HTTP_V2_RST_STREAM_SIZE) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent RST_STREAM frame with incorrect length %uz",
+                      "peer sent RST_STREAM frame with incorrect length %uz",
                       h2c->state.length);
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -1885,7 +1885,7 @@ ngx_http_v2_state_rst_stream(ngx_http_v2
 
     if (h2c->state.sid == 0) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent RST_STREAM frame with incorrect identifier");
+                      "peer sent RST_STREAM frame with incorrect identifier");
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
     }
@@ -1911,18 +1911,18 @@ ngx_http_v2_state_rst_stream(ngx_http_v2
 
     case NGX_HTTP_V2_CANCEL:
         ngx_log_error(NGX_LOG_INFO, fc->log, 0,
-                      "client canceled stream %ui", h2c->state.sid);
+                      "peer canceled stream %ui", h2c->state.sid);
         break;
 
     case NGX_HTTP_V2_INTERNAL_ERROR:
         ngx_log_error(NGX_LOG_INFO, fc->log, 0,
-                      "client terminated stream %ui due to internal error",
+                      "peer terminated stream %ui due to internal error",
                       h2c->state.sid);
         break;
 
     default:
         ngx_log_error(NGX_LOG_INFO, fc->log, 0,
-                      "client terminated stream %ui with status %ui",
+                      "peer terminated stream %ui with status %ui",
                       h2c->state.sid, status);
         break;
     }
@@ -1942,7 +1942,7 @@ ngx_http_v2_state_settings(ngx_http_v2_c
 
         if (h2c->state.length != 0) {
             ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                          "client sent SETTINGS frame with the ACK flag "
+                          "peer sent SETTINGS frame with the ACK flag "
                           "and nonzero length");
 
             return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -1958,7 +1958,7 @@ ngx_http_v2_state_settings(ngx_http_v2_c
 
     if (h2c->state.length % NGX_HTTP_V2_SETTINGS_PARAM_SIZE) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent SETTINGS frame with incorrect length %uz",
+                      "peer sent SETTINGS frame with incorrect length %uz",
                       h2c->state.length);
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -2020,7 +2020,7 @@ ngx_http_v2_state_settings_params(ngx_ht
 
             if (value > NGX_HTTP_V2_MAX_WINDOW) {
                 ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                              "client sent SETTINGS frame with incorrect "
+                              "peer sent SETTINGS frame with incorrect "
                               "INITIAL_WINDOW_SIZE value %ui", value);
 
                 return ngx_http_v2_connection_error(h2c,
@@ -2042,7 +2042,7 @@ ngx_http_v2_state_settings_params(ngx_ht
                 || value < NGX_HTTP_V2_DEFAULT_FRAME_SIZE)
             {
                 ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                              "client sent SETTINGS frame with incorrect "
+                              "peer sent SETTINGS frame with incorrect "
                               "MAX_FRAME_SIZE value %ui", value);
 
                 return ngx_http_v2_connection_error(h2c,
@@ -2102,7 +2102,7 @@ ngx_http_v2_state_push_promise(ngx_http_
     u_char *end)
 {
     ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                  "client sent PUSH_PROMISE frame");
+                  "peer sent PUSH_PROMISE frame");
 
     return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
 }
@@ -2116,7 +2116,7 @@ ngx_http_v2_state_ping(ngx_http_v2_conne
 
     if (h2c->state.length != NGX_HTTP_V2_PING_SIZE) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent PING frame with incorrect length %uz",
+                      "peer sent PING frame with incorrect length %uz",
                       h2c->state.length);
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -2164,7 +2164,7 @@ ngx_http_v2_state_goaway(ngx_http_v2_con
 
     if (h2c->state.length < NGX_HTTP_V2_GOAWAY_SIZE) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent GOAWAY frame "
+                      "peer sent GOAWAY frame "
                       "with incorrect length %uz", h2c->state.length);
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -2203,7 +2203,7 @@ ngx_http_v2_state_window_update(ngx_http
 
     if (h2c->state.length != NGX_HTTP_V2_WINDOW_UPDATE_SIZE) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent WINDOW_UPDATE frame "
+                      "peer sent WINDOW_UPDATE frame "
                       "with incorrect length %uz", h2c->state.length);
 
         return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
@@ -2275,7 +2275,7 @@ ngx_http_v2_state_window_update(ngx_http
         if (window > (size_t) (NGX_HTTP_V2_MAX_WINDOW - stream->send_window)) {
 
             ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                          "client violated flow control for stream %ui: "
+                          "peer violated flow control for stream %ui: "
                           "received WINDOW_UPDATE frame "
                           "with window increment %uz "
                           "not allowed for window %z",
@@ -2312,7 +2312,7 @@ ngx_http_v2_state_window_update(ngx_http
 
     if (window > NGX_HTTP_V2_MAX_WINDOW - h2c->send_window) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client violated connection flow control: "
+                      "peer violated connection flow control: "
                       "received WINDOW_UPDATE frame "
                       "with window increment %uz "
                       "not allowed for window %uz",
@@ -2355,7 +2355,7 @@ ngx_http_v2_state_continuation(ngx_http_
     u_char *end)
 {
     ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                  "client sent unexpected CONTINUATION frame");
+                  "peer sent unexpected CONTINUATION frame");
 
     return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
 }
@@ -3103,7 +3103,7 @@ ngx_http_v2_validate_header(ngx_http_req
         case CR:
         case ':':
             ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
-                          "client sent invalid header name: \"%V\"",
+                          "peer sent invalid header name: \"%V\"",
                           &header->name);
 
             return NGX_ERROR;
@@ -3111,7 +3111,7 @@ ngx_http_v2_validate_header(ngx_http_req
 
         if (ch >= 'A' && ch <= 'Z') {
             ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
-                          "client sent invalid header name: \"%V\"",
+                          "peer sent invalid header name: \"%V\"",
                           &header->name);
 
             return NGX_ERROR;
@@ -3128,7 +3128,7 @@ ngx_http_v2_validate_header(ngx_http_req
         case LF:
         case CR:
             ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
-                          "client sent header \"%V\" with "
+                          "peer sent header \"%V\" with "
                           "invalid value: \"%V\"",
                           &header->name, &header->value);
 
@@ -3182,7 +3182,7 @@ ngx_http_v2_pseudo_header(ngx_http_reque
     }
 
     ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
-                  "client sent unknown pseudo-header \":%V\"",
+                  "peer sent unknown pseudo-header \":%V\"",
                   &header->name);
 
     return NGX_DECLINED;
@@ -4202,7 +4202,7 @@ ngx_http_v2_close_stream_handler(ngx_eve
                    "http2 close stream handler");
 
     if (ev->timedout) {
-        ngx_log_error(NGX_LOG_INFO, fc->log, NGX_ETIMEDOUT, "client timed out");
+        ngx_log_error(NGX_LOG_INFO, fc->log, NGX_ETIMEDOUT, "peer timed out");
 
         fc->timedout = 1;
 
@@ -4270,7 +4270,7 @@ ngx_http_v2_idle_handler(ngx_event_t *re
         if (rev->pending_eof) {
             c->log->handler = NULL;
             ngx_log_error(NGX_LOG_INFO, c->log, rev->kq_errno,
-                          "kevent() reported that client %V closed "
+                          "kevent() reported that peer %V closed "
                           "idle connection", &c->addr_text);
 #if (NGX_HTTP_SSL)
             if (c->ssl) {
diff -r 22d178a11e30 -r 912d9cf36783 src/http/v2/ngx_http_v2_table.c
--- a/src/http/v2/ngx_http_v2_table.c
+++ b/src/http/v2/ngx_http_v2_table.c
@@ -96,7 +96,7 @@ ngx_http_v2_get_indexed_header(ngx_http_
 
     if (index == 0) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent invalid hpack table index 0");
+                      "peer sent invalid hpack table index 0");
         return NGX_ERROR;
     }
 
@@ -165,7 +165,7 @@ ngx_http_v2_get_indexed_header(ngx_http_
     }
 
     ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                  "client sent out of bound hpack table index: %ui", index);
+                  "peer sent out of bound hpack table index: %ui", index);
 
     return NGX_ERROR;
 }
@@ -326,7 +326,7 @@ ngx_http_v2_table_size(ngx_http_v2_conne
 
     if (size > NGX_HTTP_V2_TABLE_SIZE) {
         ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
-                      "client sent invalid table size update: %uz", size);
+                      "peer sent invalid table size update: %uz", size);
 
         return NGX_ERROR;
     }

